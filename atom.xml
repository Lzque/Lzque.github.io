<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白糖加冰</title>
  
  <subtitle>白糖加冰的博客</subtitle>
  <link href="https://lzque.github.io/atom.xml" rel="self"/>
  
  <link href="https://lzque.github.io/"/>
  <updated>2022-10-06T12:53:29.085Z</updated>
  <id>https://lzque.github.io/</id>
  
  <author>
    <name>xsc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在IDEA中使用Git</title>
    <link href="https://lzque.github.io/posts/141e.html"/>
    <id>https://lzque.github.io/posts/141e.html</id>
    <published>2022-10-03T13:23:40.000Z</published>
    <updated>2022-10-06T12:53:29.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><ol><li><p>首先进入设置，在搜索框中输入 Git 回车，可以看到（如果没有可以去下载插件 Git、GitHub）：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210040920723.png" alt="IDEA 中设置 Git" data-caption="IDEA 中设置 Git" loading="lazy"></p></li><li><p>文件路径定位到本机 Git 中的 git.exe 位置，然后点击 Test 测试是否配置成功，成功会在路径下或弹窗显示版本号</p></li><li><p>点击 GitHub，在“+”中选择 Log In via GitHub，会在浏览器弹出登录页面，跟着操作然后输入密码就可以了（这里博主使用的版本是 2021.2.1，其他版本的 IDEA 可能会跳出弹窗要求输入 GitHub 账号密码，按要求操作即可）：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210040935990.png" alt="在 IDEA 中登录 GitHub" data-caption="在 IDEA 中登录 GitHub" loading="lazy"></p></li></ol><h4 id="Git-文件忽略插件"><a href="#Git-文件忽略插件" class="headerlink" title="Git 文件忽略插件"></a>Git 文件忽略插件</h4><p>在 IDEA 中使用 Git，并非所有的项目文件都需要进行版本管理（如 target 目录），所以可以通过插件配置 Git 的文件忽略。</p><ol><li><p>在设置中搜索 Plugins 进入插件中心，然后搜索 .ignore 安装，之后点击 OK 再重启 IDEA：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041022519.png" alt="安装 Git 文件忽略插件" data-caption="安装 Git 文件忽略插件" loading="lazy"></p></li><li><p>然后，在项目下右键新建 .gitignore 文件：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041035819.png" alt="新建 .gitignore 文件" data-caption="新建 .gitignore 文件" loading="lazy"></p></li><li><p>出现弹窗，勾选自己项目开发所用的语言，博主这里是 Java，然后点击 Generate：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041052736.png" alt="根据项目语言选择生成 .gitignore 文件" data-caption="根据项目语言选择生成 .gitignore 文件" loading="lazy"></p></li><li><p>然后，可以在项目目录下看到生成的文件，里面自动添加了一般要忽略的文件匹配符：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041115486.png" alt=".gitignore 文件" data-caption=".gitignore 文件" loading="lazy"></p></li><li><p>如果没有看到生成的文件，可以设置中搜索 File Types，是否是隐藏 .gitignore 文件，隐藏了的话删除然后点击 OK 即可：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041048137.png" alt="文件隐藏显示" data-caption="文件隐藏显示" loading="lazy"></p></li></ol><h2 id="操作-Git"><a href="#操作-Git" class="headerlink" title="操作 Git"></a>操作 Git</h2><p>在 IDEA 中，对于 Git 相关的操作可以方便的进行可视化管理。</p><h4 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h4><ol><li><p>在工具栏中的 VCS 下选择 Create Git Repository（不同版本的 IDEA 位置可能不同）：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041129851.png" alt="创建 Git 仓库" data-caption="创建 Git 仓库" loading="lazy"></p></li><li><p>出现弹窗，选择要初始化的本地项目，这里以一个 SpringBoot 的练习项目为例，选中然后点击就 OK：</p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041135533.png" title="" alt="Git 初始化本地项目" data-caption="Git 初始化本地项目" loading="lazy"></li></ol><h4 id="提交项目文件到本地仓库"><a href="#提交项目文件到本地仓库" class="headerlink" title="提交项目文件到本地仓库"></a>提交项目文件到本地仓库</h4><p>接着上一步，项目使用 Git 初始化后，未提交会报红（后续未提交是蓝色，可能主题不同颜色也不同，但不报红了），所以接下来提交代码到本地仓库：</p><ol><li><p>根据下图的标注1或2点击执行提交命令：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041146210.png" alt="提交命令执行" data-caption="提交命令执行" loading="lazy"></p></li><li><p>弹出窗口或在左边出现一个抽屉窗口，提示有多少个文件未版本化，点击 browse，出现弹窗，选择全部添加</p></li><li><p>全选后，输入提交说明，点击 Commit，等待代码分析，显示代码中有错误或警告（这里的错误是使用 Element-ui 中识别的错误，如果是开发代码的错误不建议提交），我们选择 Commit Anyway，提交完成：</p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041455688.png" alt="代码提交" data-caption="代码提交" loading="lazy"></li><li><p>提交完成后，可以下边信息提示栏中看到提交日志：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041502119.png" alt="代码提交日志" data-caption="代码提交日志" loading="lazy"></p></li></ol><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><ol><li><p>做完第一次提交后工具栏可能会发生变化，参考下图找到并点击 push 选项：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041601066.png" alt="push 指令位置" data-caption="push 指令位置" loading="lazy"></p></li><li><p>出现弹窗，点击 Define remote，在出现弹窗输入连接名和 ssh 地址（这里需要大家在 GitHub 上创建一个远程仓库），然后点击 OK：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041611822.png" alt="添加远程仓库" data-caption="添加远程仓库" loading="lazy"></p></li><li><p>由于前面已经绑定过 GitHub 账号了，所以这里就不需要登录验证了，下图中的标注1代表远程仓库和远程分支，其中仓库是刚才添加的，分支和当前分支同名，接下来点击 push 即可</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210041701211.png" alt="本地项目推送" data-caption="本地项目推送" loading="lazy"></p></li></ol><h4 id="同步远程仓库更新"><a href="#同步远程仓库更新" class="headerlink" title="同步远程仓库更新"></a>同步远程仓库更新</h4><ol><li><p>按下图标注点击执行同步命令，有三个标注，标注3对应的功能就是<code>git pull</code>，点击弹出窗口选择连接名和分支名即可，而标注1和2只是位置不同功能相同：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210042104665.png" alt="同步命令位置" data-caption="同步命令位置" loading="lazy"></p></li><li><p>点击标注1或2，弹出窗口：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210042143546.png" alt="两种项目更新方式" data-caption="两种项目更新方式" loading="lazy"></p><ul><li><p>a 官方解析翻译：将传入的更改合并到当前分支，选择此选项可在更新过程中执行合并；这相当于运行<code>git fetch</code>，然后运行<code>git merge</code>，或者<code>git pull - no-rebase</code></p></li><li><p>b 官方解析翻译：将当前分支重新基于引入的变更之上，即选择此选项可在更新期间执行重设基础；这相当于运行<code>git fetch</code>，然后运行<code>git rebase</code>，或者<code>git pull - rebase</code>(所有本地提交都将放在更新的上游 HEAD 之上)</p></li><li><p>更详细的解析可以点击左下角的“?”查看，一般选择 a 即可</p></li><li></li></ul></li><li><p>实质上，选择 a 和选择标注3的功能等同，但需要更改同步的分支时使用标注3，而选项 b 应该使用不多，看需求而定吧，读者可以选择默认使用 a，然后更新本地项目时点击使用标注2，这样更方便些。由于现在博主也是初次使用这些功能，所以这里讲的可能不太清晰，如果有什么不对的，欢迎大家在评论区指正</p></li></ol><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>在合并是冲突总是难以避免的，下面列举两种出现冲突的情况和解决过程：</p><ol><li><p>因同一文件同一部分被修改而出现的冲突：</p><ul><li><p>首先，博主同时修改了一个实体类中的一个注释，然后进行 pull 操作，发生冲突：</p><p> <img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210050915243.png" alt="冲突的产生" data-caption="冲突的产生" loading="lazy"></p></li><li><p>一般使用手动合并，弹出如下窗口，我们可以通过点击“X” “&gt;&gt;”决定使用那一部分修改，或直接编辑 Result，但要确保所有的“X” “&gt;&gt;”都处理完，不需要的就“X”，确定最终修改点击 Apply（修改可以使用 Ctrl + Z 撤销）：</p><p>  <img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210050934565.png" alt="最终修改决定" data-caption="最终修改决定" loading="lazy"></p></li><li><p>最终可以看到合并日志：</p><p> <img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210050949401.png" alt="合并完成日志" data-caption="合并完成日志" loading="lazy"></p></li><li></li></ul></li><li><p>一方修改文件而另一方删除文件：</p><ul><li><p>首先，博主在本地和远程对同一个文件分别做了修改和删除的提交，执行 pull 指令，弹出冲突窗口，选择手动合并：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051006606.png" alt="手动合并文件" data-caption="手动合并文件" loading="lazy"></p></li><li><p>在此种情况下对于冲突的解决和第一种基本一样，只是这里认为删除文件等同于清空文件了，要彻底删除还需要手动删除提交一次</p></li><li></li></ul></li><li><p>关于合并的一些注意事项：</p><ul><li>要在自己的开发的分支上进行合并，即先拉取主分支更新，然后再推送   </li><li>多人协作开发中发生冲突时，不要自行决定修改的去留，要与发生冲突的修改提交者<B>协商</B>，决定最终修改   </li><li>冲突结局后，要重启项目验证修改是否正确，正确后 push</li></ul></li></ol><h4 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h4><ol><li><p>如下图，点击 Clone 选项，不同版本的 IDEA 选项位置可能不同，如果没有 Git 菜单，可以在 VCS 下找 Checkout from Version Control，选择 Git：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051123076.png" alt="Clone 选项" data-caption="Clone 选项" loading="lazy"></p></li><li><p>在弹窗中选择仓库存储位置，然后输入远程仓库地址（填写 ssh 地址后续 push 不用登录 GitHub 账号），此时本地仓库名会自动补全，和远程仓库名相同，填写完毕点击 Clone：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051149223.png" alt="克隆信息填写" data-caption="克隆信息填写" loading="lazy"></p></li><li><p>等待克隆完成，如果网络不好克隆可能会失败，重试即可，克隆完成出现如下弹窗：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051508705.png" alt="项目弹窗" data-caption="项目弹窗" loading="lazy"></p></li><li><p>弹窗1询问是否信任项目，选择 Trust Project，弹窗2根据实际情况选择，博主这里没有使用 Git 管理整个项目文件，而是管理了一个模块，所以点击 Cancel，后续作为模块打开，下图是打开模块的方式，注意选择 pom.xml 来打开：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051521302.png" alt="IDEA 打开模块" data-caption="IDEA 打开模块" loading="lazy"></p></li></ol><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><ol><li><p>两种创建分支方式：</p><ul><li><p>在当前分支的最新提交处，即 HEAD 标签所在位置创建，点击标注2弹出窗口输入分支名即可，默认会创建并切换到新分支中，标注1显示当前分支：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051545803.png" alt="HEAD 指针处创建分支" data-caption="HEAD 指针处创建分支" loading="lazy"></p></li><li><p>在日志中任意位置创建分支，选择要创建分支的位置，右键选择 New Branch 即可：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051554450.png" alt="日志任意位置创建分支" data-caption="日志任意位置创建分支" loading="lazy"></p></li><li></li></ul></li><li><p>还有一些其他的分支操作，基本都在下图的位置，大家可以根据需求使用，由于博主也是刚刚开始使用，所以下图解析有些只是翻译，大家作为参考就好：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051614102.png" alt="分支操作解析" data-caption="分支操作解析" loading="lazy"></p></li></ol><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>在 Git 基本使用中，只讲了版本回退的基本使用，这里将进行补充，并讲解其在 IDEA 中的使用。</p><ol><li><p>命令行实现：</p><ul><li><p>单一文件在工作区的修改想要撤销：当写代码时，发现工作区中一个文件或类中的改动出现了根本错误，想要还原到开始的状态，又保留其他文件在工作区的修改，此时我们可以先提交再通过另一个库拷贝上一个版本想要还原的文件，但这样太麻烦并且影响太大（在此分支中保留了一个坏提交），其实我们可以通过指令<code>git checkout -- &lt;file&gt;</code>来实现需求，如下图，我们并没有提交，但通过前后两次文件状态的查看可以看出 restore.txt 文件的修改已经撤销：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210052135497.png" alt="还原工作区单一文件状态" data-caption="还原工作区单一文件状态" loading="lazy"></p></li><li><p>添加到暂存区的修改撤销方法：首先，我们将暂存区中的修改都撤销到工作区，然后通过上面的方法还原文件到开始状态，如下图，我们可以使用指令<code>git reset HEAD</code>来撤销暂存区的添加：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210052148183.png" alt="撤销暂存区的添加" data-caption="撤销暂存区的添加" loading="lazy"></p></li><li><p>提交到本地仓库的撤销（版本切换）：我们使用指令<code>git reset --hard &lt;版本号&gt;</code>，版本号回退之前已经讲过了，这里补充回退到前一两个版本的方法；如下图，使用<code>HEAD^</code>描述版本，一个<code>^</code>代表前一个版本，两个<code>^^</code>代表前两个版本，以此类推；或者使用数字代替，如前10个版本写作<code>HEAD~10</code>：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210060854277.png" alt="版本回退，前几次" data-caption="版本回退，前几次" loading="lazy"></p></li><li></li></ul></li><li><p>在 IDEA 中操作：</p><ul><li><p>未提交时想要还原文件开始状态：如下图，可以点击 Rollback 按钮，弹出 Rollback Changes 弹窗，勾选要还原的文件，无论文件处于工作区还是暂存区，选择完成后点击 Rollback 按钮即可：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210060919736.png" alt="在 IDEA 中还原文件为初始状态" data-caption="在 IDEA 中还原文件为初始状态" loading="lazy"></p></li><li><p>提交了想要回退版本：首先需要打开提交日志，如下图，点击 Show Git Log 打开（标注1或2），其中标注3代表当前文件的提交历史查看，并不是整体的提交日志：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210060943168.png" alt="提交日志打开" data-caption="提交日志打开" loading="lazy"></p></li><li><p>撤销方式可以分为两种，分别是 Undo Commit 和 Revert Commit；我们先说 Undo Commit，它只能撤销上一次提交，将修改放到暂存区，然后可以改写提交消息或者根据上面的方法还原文件为开始状态；具体操作如下图，在上一次提交记录上右键选择 Undo Commit，然后在弹出窗口中点击 OK 即可：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210060956766.png" alt="上一次提交撤销" data-caption="上一次提交撤销" loading="lazy"></p></li><li><p>Revert Commit 撤销在所有提交记录中都可用，并且版本切换后会产生一条提交记录，表示回滚操作也作为一次版本提交，这样就不会损失提交记录了；如下图所示，只要在想要切换的版本提交记录上右键点击 Revert Commit，有的版本的 IDEA 会弹出窗口可以自定义版本切换产生的提交记录的消息，但博主这里的消息默认为<code>Revert&quot;所切换版本的提交消息&quot;</code>：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210061025551.png" alt="Revert Commit 的使用" data-caption="Revert Commit 的使用" loading="lazy"></p></li><li></li></ul></li></ol><blockquote><p>版本回退的总结参考了_江南一点雨的 CSDN 博客<a href="http://t.csdn.cn/GmHh0">http://t.csdn.cn/GmHh0</a> ，感兴趣的小伙伴可以去阅读学习下</p></blockquote><h2 id="使用命令行进行操作"><a href="#使用命令行进行操作" class="headerlink" title="使用命令行进行操作"></a>使用命令行进行操作</h2><ol><li><p>更改 IDEA 控制台配置，在设置里搜索 terminal，配置编码集 LESSCHARSET=utf-8 和使用的控制台程序路径，然后点击 OK 即可：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210051656665.png" alt="IDEA 控制台设置" data-caption="IDEA 控制台设置" loading="lazy"></p></li><li><p>命令行窗口可以在下图的两个地方打开，使用方法和 Git Bash 相同：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210052042902.png" alt="命令行打开选项" data-caption="命令行打开选项" loading="lazy"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置-Git&quot;&gt;&lt;a href=&quot;#配置-Git&quot; class=&quot;headerlink&quot; title=&quot;配置 Git&quot;&gt;&lt;/a&gt;配置 Git&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先进入设置，在搜索框中输入 Git 回车，可以看到（如果没有可以去下载插件 Git、Gi</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="https://lzque.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Git 演练" scheme="https://lzque.github.io/tags/Git-%E6%BC%94%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>Git远程仓库--GitHub</title>
    <link href="https://lzque.github.io/posts/35bb.html"/>
    <id>https://lzque.github.io/posts/35bb.html</id>
    <published>2022-10-02T03:37:36.000Z</published>
    <updated>2022-10-06T07:33:03.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GitHub（<a href="https://github.com/">https://github.com/</a>）是一个面向开源和私有软件的托管平台，因其只支持 Git 作为唯一的版本库形式进行托管，所以名为 GitHub。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>首先，我们要<a href="http://t.csdn.cn/ultpJ">注册一个 GitHub 账号</a>，然后进入主页面：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021554352.png" alt="新建仓库选项" data-caption="新建仓库选项" loading="lazy"></p><p>通过在标注1中菜单选择 new repository或者点击标注2进入到下面页面：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021606997.png" alt="新建仓库页面" data-caption="新建仓库页面" loading="lazy"></p><ol><li><p>标注1：仓库命名，建议使用<mark>项目名-类型-时间</mark>的形式</p><ul><li>项目名规范：    <blockquote><ul><li>库名中不得出现下述规定的字符- \ @ ! # $ % ^ &amp; * () [] {} | \ ; : ‘’ ’ ， 。 《 》 &lt; &gt; · ~ </li><li>库名应尽量避免使用 名.名的形式 </li><li>库名应尽量使用英文，禁止使用中文字符；一般情况下，库名中出现的各个单词的首字母应使用大写；各个单词不能使用连接符 -连接；如有必要，应使用下划线 </li><li>缩写的单词一律使用大写</li></ul></blockquote></li></ul><ul><li>类型规定：    <blockquote><ul><li>TST——测试项目 </li><li>BC——已完成项目 </li><li>SUS——被搁置项目 </li><li>ING——正在进行的项目 </li><li>TST-BC——已完成的测试项目 </li><li>TST-SUS——被搁置的测试项目 </li><li>TST-ING——正在进行的测试项目</li></ul></blockquote></li></ul></li><li><p>标注2：仓库描述，根据实际情况选择书写</p></li><li><p>标注3：仓库类型，私有/公有，根据需求选择</p></li><li><p>标注4：勾选后会为仓库添加一个 md 格式的初始化描述文件（README.md），作为第一个提交，但如果创建此仓库是为了导入本地仓库的也可不勾选</p></li></ol><p>信息填写完毕，点击 Create repository 即完成创建。</p><h4 id="GitHub-常用术语"><a href="#GitHub-常用术语" class="headerlink" title="GitHub 常用术语"></a>GitHub 常用术语</h4><ol><li><p>Repository：简称 Repo，在这里理解为“仓库”，一般我们一个项目对应一个仓库</p></li><li><p>Issues：“问题”，一般用来作为他人对我们开源项目的建议或者发现项目 bug 的沟通途径，在博客中使用到的 gitment、gitalk 评论系统也是基于此开发的</p></li><li><p>Star：“点赞 + 收藏”，对喜欢的项目可以点星收藏，它会保存到我们的 Star 中</p></li><li><p>Clone：“克隆”，可以理解为从 GitHub 上下载开源项目代码到本地，作为学习或者使用</p></li><li><p>Fork：“拉分支”，当我们对某个项目感兴趣并想以此为基础进行开发时，我们可以使用“Fork”功能，表示复制一份相同的项目到我们的 GitHub 账号中，相当于在此版本基础上创建了一个分支，复制的项目包含了原有库中的所有提交记录</p></li><li><p>Pull Request：“拉取请求”，可以理解为向原项目的拥有者请求合并自己对于项目的修改，前提是你对项目做出了良好的修改，等待审核通过，我们的修改就会合并到原项目中，我们也成为了该项目的贡献者之一</p></li><li><p>Merge：“合并”，别人 Fork 了我们的项目并做出修改，向我们发送了 Pull 请求，这是我们可以对其修改进行审核，如果符合我们的要求，就可以进行合并</p></li><li><p>Watch：“观察”，或者说“订阅”，当项目有任何更新时，我们可以接到通知</p></li><li><p>Gist：用于分享一些代码片段</p></li></ol><h4 id="Git-和-GitHub"><a href="#Git-和-GitHub" class="headerlink" title="Git 和 GitHub"></a>Git 和 GitHub</h4><p>现在，我们虽然可以通过 Git 下载（Clone）GitHub 上的项目代码，但二者之间并没有绑定，我们不能向 GitHub 提交本地仓库的代码，因此，我们需要通过配置 ssh 公钥实现绑定。</p><ol><li><p>生成 ssh key：</p><ul><li><p>首先，需要安装 ssh（Windows 默认不安装，Linux 和 Mac 默认安装），我们安装的 Git 中已经自带了 ssh，可以通过在命令行中输入 ssh 查看：<br> <img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210022030201.png" alt="ssh 安装查看" data-caption="ssh 安装查看" loading="lazy">   </p></li><li><p>然后，在 Git Bash 中输入<code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code>指令，通过 RSA 算法生成密钥，然后敲击三次回车键（如果已经生成过了，会覆盖掉原来的），之后可以在用户目录下看到 .ssh 目录，里面有 id_rsa（私钥） 和 id_rsa.pub（公钥），我们需要的是 id_rsa.pub 中的内容，可以打开文件或输入<code>cat ~/.ssh/id_rsa.pub</code>复制其中内容</p></li><li></li></ul></li><li><p>在 GitHub 中添加 ssh key：</p><ul><li><p>进入设置：<br><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210040852442.png" alt="GitHub 设置进入" data-caption="GitHub 设置进入" loading="lazy">   </p></li><li><p>点击 SSH and GPG keys 菜单，在此页面中点击 New SSH key：<br><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210040839862.png" alt="添加 ssh key 页面" data-caption="添加 ssh key 页面" loading="lazy">   </p></li><li><p>把刚才复制的公钥粘贴到 Key 文本框中，Title 可以随意填写，然后点击 Add SSH key 即可：<br><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210022108579.png" alt="ssh key 填写" data-caption="ssh key 填写" loading="lazy"></p></li><li></li></ul></li><li><p>验证是否绑定成功，在 Git Bash 中输入<code>ssh -T git@github.com</code>指令，如下图，便是绑定成功：<br><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210022111485.png" alt="ssh 绑定验证" data-caption="ssh 绑定验证" loading="lazy"></p></li></ol><h4 id="基础指令介绍"><a href="#基础指令介绍" class="headerlink" title="基础指令介绍"></a>基础指令介绍</h4><ol><li><p>添加远程仓库：<code>git remote add &lt;远端连接名&gt; &lt;远程仓库地址&gt;</code></p><ul><li>远端连接名：默认是 origin，可以自行指定   </li></ul><ul><li>远程仓库地址：在 GitHub 仓库页面中点击 Code 获取，有 https 和 ssh 两种类型地址，下面简述二者的使用区别：     <ul><li><p>https 地址适合开源项目的访问，可以很方便的获取代码到本地，但没有 push 权限，一般作为开源项目下载代码使用  </p></li><li><p>ssh 地址的使用要求仓库拥有者的 GitHub 中添加了本机的 ssh key，并且不能匿名访问，可以 push，但如果配置 ssh key 是设置了密码，push 要输入密码，比较适合使用公钥认证的内部项目</p></li><li></li></ul></li></ul></li><li><p>查看已添加的远程仓库及地址：<code>git remote -v</code></p></li><li><p>修改已添加远程仓库的地址：</p><ul><li><code>git remote set-url 连接名 新地址</code>   </li><li>先删除：<code>git remote rm 连接名</code>，后添加<code>git remote add 连接名 新地址</code></li></ul></li><li><p>把本地仓库推送到已添加的远程仓库：<code>git push [-f] [--set-upstream] [远端连接名 [本地分支名][:远端分支名]]</code></p><ul><li>首次推送会跳出 GitHub 登录窗口，输入 GitHub 账号和登陆密码即可   </li><li>如果远端分支名和本地分支名相同，则可以只写本地分支名，否则当远端无此分支且只写本地分支名时，会自动创建同名分支   </li><li>-f：强制覆盖远程仓库，代码冲突以本地为准   </li><li>–set-upstream：推送到远端的同时<u>建立本地分支和远端分支的关联关系</u>   </li><li>当关联关系建立后，可以省略远端名和分支名，使用<code>git push</code>即可实现推送</li></ul></li><li><p>查看本地分支和远端分支的关联关系：<code>git branch -vv</code>  <img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210031003650.png" alt="远程分支关联查看" data-caption="远程分支关联查看" loading="lazy"></p></li><li><p>从远程仓库克隆到本地仓库：<code>git clone 仓库路径地址 [本地目录]</code></p><ul><li>本地目录省略时，会以地址的最后一段作为目录名      </li></ul><ul><li>一般只会克隆 GitHub 上的默认分支(master 或 main)，并建立好分支间关联关系     </li></ul><ul><li>如果想要克隆指定分支可以使用（关联关系同样建立）：<ul><li><p>方法一：<code>git clone -b 分支名 仓库路径 [本地目录]</code>    </p></li><li><p>方法二：首先要求本地仓库和远程仓库已有分支建立了关联关系，如已克隆了某一分支，然后使用指令<code>git branch 新建分支名 连接名/远端分支名</code>，即新建一个本地分支并跟踪远程仓库中的某个分支，此时内容已经同步到这个新建分支了 ，并建议两个分支名相同，新建分支名和远端分支名一样，推送时直接<code>git push</code>即可     </p></li><li><p>以上两种方法使用的情况有所不同，读者根据需求选用，更多的如克隆所有分支，请参考博客<a href="http://t.csdn.cn/tkNim">http://t.csdn.cn/tkNim</a></p></li><li></li></ul></li></ul></li><li><p>将远程仓库更新同步到本地：</p><ul><li><p>抓取：<code>git fetch [连接名] [分支名]</code>，此时将远程仓库的更新抓取到本地但不会合并 </p></li><li><p>拉取：<code>git pull [连接名] [分支名]</code>,相当于 fetch+merge，将修改拉到本地并自动进行合并，一般我们 push 前要先 pull，避免提交冲突   </p></li><li><p>以上两条指令如果不指定连接名和分支名，会将所有分支更新抓/拉到本地</p></li><li></li></ul></li></ol><h4 id="两种使用场景"><a href="#两种使用场景" class="headerlink" title="两种使用场景"></a>两种使用场景</h4><ol><li><p>当我们本地没有初始化仓库时，可以直接克隆远程仓库到本地，此时我们直接 cd 进入目录中操作，无需再进行初始化操作，并且此时分支间的关联关系已经建立，代码提交可以直接<code>git push</code>；</p></li><li><p>当本地仓库已建立，我们的代码版本需要更新到最新版本，此时：</p><ul><li><p>首先，使用指令<code>git remote add &lt;远端连接名&gt; &lt;远程仓库地址&gt;</code>添加远程仓库</p></li><li><p>然后，输入<code>git pull [连接名] [分支名]</code>更新本地仓库   </p></li><li><p>最后，使用<code>git push [-f] [--set-upstream] [远端连接名 [本地分支名][:远端分支名]]</code>推送代码到远程仓库，并且只按如上操作，本地和远程的分支并没有关联，推送需要指定远端连接名和分支名</p></li><li></li></ul></li></ol><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>在开发中，我们上传到远程仓库前建议先拉取(pull)远程仓库的内容到本地，然后再推送(push)，拉取到本地也会发生冲突，以下列举两种情况（注意：发生冲突并解决后，需要进行一次手动提交）：</p><ol><li><p>同一个文件中的同一部分代码本地和远程都进行了更改，冲突的文件内容：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021032430.png" alt="文件修改冲突" data-caption="文件修改冲突" loading="lazy"></p><ul><li>此时，我们应该和另一个开发人员协商保留哪一部分代码，或者重新书写代码提交</li><li>然后，将修改从工作区添加到暂存区，再提交到本地仓库，实现合并后推送</li></ul></li><li><p>本地和远程仓库间一个删除了文件，另一个修改了该文件，此时需要决定项目中是否保留这个文件：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210031601209.png" alt="删除修改冲突" data-caption="删除修改冲突" loading="lazy"></p><ul><li>本例中使用指令<code>git add 111/1.txt</code>保留文件</li><li>使用指令<code>git rm 111/1.txt</code>删除文件</li><li>然后，使用<code>git commit -m&quot;消息&quot;</code>提交，并可以推送到远程仓库了</li></ul></li></ol><blockquote><p>补充：这篇博客是博主的学习总结，主要参考了CG国斌的<a href="http://t.csdn.cn/1kE3X">史上最简单的 GitHub 教程</a> CSDN 博客和黑马程序员的 <a href="https://www.bilibili.com/video/BV1MU4y1Y7h5?share_source=copy_web&vd_source=a320b4683f60a78bcf2d3cc8fd150ea7">Git 学习视频</a>，想了解更多有关 GitHub 内容的小伙伴可以去看看</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;GitHub（&lt;a href=&quot;https://github.com/&quot;&gt;https://github.com/&lt;/a&gt;）是一个面向开源和私</summary>
      
    
    
    
    <category term="Git" scheme="https://lzque.github.io/categories/Git/"/>
    
    
    <category term="学习笔记" scheme="https://lzque.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Git 进阶" scheme="https://lzque.github.io/tags/Git-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git基本使用</title>
    <link href="https://lzque.github.io/posts/9bd.html"/>
    <id>https://lzque.github.io/posts/9bd.html</id>
    <published>2022-09-30T02:14:11.000Z</published>
    <updated>2022-10-06T07:29:29.702Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用 Hexo+GitHub 搭建博客，所以对 Git 做下记录总结。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Git 是一个分布式的版本控制工具。两个关键词：</p><ol><li><p>分布式，即没有限制说哪个文件仓库是“中央服务器”，每个人的电脑都拥有完整的版本库，无需联网就可以独立的实现版本控制，也可以让某一台电脑作为中央服务器，方便大家交流修改，并且如果本地仓库出问题了，去其他人哪里复制一个就好了；也有集中式的版本控制工具，如SVN和CVS，工作时要连入网络在中央服务器中下载代码，修改也要提交到中央服务器上才能记录一个版本，这对于网速和中央服务器的稳定都有一定要求，一般是企业内部使用。</p></li><li><p>版本控制：即可以对其工作空间下的文件修改(增删改)实现管理，每次提交就记录一次版本，像游戏里的存档，可以根据需求回退到某一次提交，可以放心的修改代码了；并且在发现 bug 的时候也方便溯源。</p></li></ol><h2 id="Git-安装和基本配置"><a href="#Git-安装和基本配置" class="headerlink" title="Git 安装和基本配置"></a>Git 安装和基本配置</h2><p>下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202209301435345.png" alt="Git下载" data-caption="Git下载" loading="lazy"></p><p>下载完成后，双击安装，随后鼠标右键可以看到以下两个菜单就说明安装成功了。</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202209301444222.png" alt="Git菜单" data-caption="Git菜单" loading="lazy"></p><ol><li><p>Git GUI Here：Git 提供的图形操作页面工具</p></li><li><p>Git Bash Here：Git 提供的命令行工具，后续主要在此进行操作</p><ul><li>补充：Git Bash 中选中即复制，鼠标中键即可粘贴</li></ul></li></ol><p>基本配置：</p><ol><li><p>需要 Git Bash 配置用户名和邮箱地址，每次和提交代码一并提交，表明此版本是谁做出的修改</p></li><li><p>配置：</p><ul><li><code>git config --global user.name “用户名”</code></li><li><code>git config --global user.email “邮箱地址“</code></li></ul></li><li><p>查看：</p><ul><li><code>git config --global user.name</code></li><li><code>git config --global user.email</code></li><li>或 <code>git config --global --list</code></li></ul></li><li><p>实际上，这些信息存储在用户目录下的 .gitconfig 文件()中</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202209301509150.png" alt="git 用户信息存储" data-caption="git 用户信息存储" loading="lazy"></p></li></ol><p>在 Git Bash 中可以使用一些 Linux 命令来简化操作：</p><ul><li>ls 查看当前目录文件</li><li>cat 查看文件内容</li><li>touch 创建文件，可跟文件名或文件路径</li><li>vi 进入 vi 编辑器</li><li>cd 目录切换</li></ul><p>常用命令可配置别名，不局限于 Git 命令，以下是我在使用的一种方式：</p><ol><li><p>进入 Git Bash，执行 <code>touch ~/.bashrc</code>（用户目录下新建 .bashrc 文件）</p></li><li><p>在文件中输入要配置的命令别名 (等号两边不能留空)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#用于输出git提交日志</span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;  </span><br><span class="line">#用于输出当前目录所有文件及基本信息</span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br><span class="line">#用于快速上传博客</span><br><span class="line">alias hc=&#x27;hexo clean&#x27;  </span><br><span class="line">alias hg=&#x27;hexo generate&#x27;  </span><br><span class="line">alias hd=&#x27;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy&#x27;  </span><br><span class="line">alias hs=&#x27;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s&#x27; ```</span><br></pre></td></tr></table></figure></li><li><p>然后打开 Git Bash，第一次应该要加载一下，输入 <code>source ~/.bashrc</code> 命令执行即可</p></li></ol><p>接下来进行本地仓库的初始化，以此进行版本控制：</p><ol><li><p>在一个空目录下右键进入 Git Bash 窗口</p></li><li><p>执行 <code>git init</code> 命令，初始化本地仓库</p><ul><li><code>git init [directory name]</code>    新建一个目录并将其初始化为本地仓库</li></ul></li><li><p>出现 .git 目录(此为隐藏目录)就完成了</p></li></ol><h2 id="Git-文件分区和基础操作指令"><a href="#Git-文件分区和基础操作指令" class="headerlink" title="Git 文件分区和基础操作指令"></a>Git 文件分区和基础操作指令</h2><p>在 Git 工作目录(初始化的本地仓库)下，文件被修改(新建、删除、更新)后会放到工作区中，并且这些改动是临时的，如果需要永久存储则需要把文件添加到暂存区，然后再从暂存区提交到本地仓库，一般会携带一段消息说明此次改动的内容或原因。</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202209301715000.png" alt="Git 文件状态分区" data-caption="Git 文件状态分区" loading="lazy"></p><h4 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h4><ol><li><p>查看文件的修改状态(是否有文件处于暂存区、工作区)：<code>git status</code></p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202209302038985.png" alt="Git 文件状态" data-caption="Git 文件状态" loading="lazy"></p></li><li><p>从工作区添加一个或多个文件修改到暂存区：git add 文件相对路径|通配符</p><ul><li>常用的有：<code>git add --all</code>，添加本地仓库中所有的修改，即使在子目录下执行</li></ul></li><li><p>提交暂存区的内容到本地仓库的当前分支：<code>git commit -m&quot;修改的说明&quot;</code></p><ul><li><p>提交间隔时间要短，以几个小时的开发时间为宜，一般每完成一个小功能就提交一次，确认修复一个 bug 也提交一次，保证代码不会丢失</p></li><li><p>修改说明要明确且清晰描述本次提交的内容和目的，使得多人协作时其他成员无需查看代码便了解此次更新的概况</p></li><li></li></ul></li><li><p>改写上一次提交信息：<code>git commit --amend</code>，此时会进入 vi 编辑器进行提交消息的改写</p></li><li><p>查看提交日志：<code>git log [option]</code>，option可以是多个，用空格隔开，常用的有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--all：显示所有分支</span><br><span class="line">--pretty=oneline：将每次提交的信息显示为一行</span><br><span class="line">--abbrev-commit：输出更简短的 commitId</span><br><span class="line">--graph：在日志旁以 ASCII 图形显示分支与合并历史</span><br></pre></td></tr></table></figure><p>示例（可以通过配置别名的方法简化指令）：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202209302125429.png" alt="Git 提交日志查看" data-caption="Git 提交日志查看" loading="lazy"></p></li><li><p>版本切换：<code>git reset --hard|--soft commitId</code></p><ul><li>–hard和 –soft 二选一：        <ul><li>–hard，抛弃当前工作区的修改     </li><li>–soft，回退到之前的版本，但保留当前工作区的修改，可以重新提交</li></ul></li></ul><ul><li>可以通过 commitId 切换不同的版本      </li></ul><ul><li>回退到某一个版本后，其后的提交日志也将无法通过 git log 的方式查看      </li></ul><ul><li>查看版本回退后损失的提交记录：<code>git reflog</code></li></ul></li><li><p>添加文件到忽略列表，即文件不再受到 Git 管理，不需要同步到仓库中，如在 JavaWeb 项目中开发产生的 target 目录文件等临时文件：</p><ul><li><p>在仓库目录下创建一个 .gitignore 文件     </p></li><li><p>编辑文件，列出不想被管理的文件，可以是具体的文件名或通配符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#忽略所有 .a 结尾的文件 </span><br><span class="line">*.a</span><br><span class="line">#但 lib.a 除外 </span><br><span class="line">!lib.a</span><br><span class="line">#仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO </span><br><span class="line">TODO</span><br><span class="line">#忽略 build/ 目录下的所有文件 </span><br><span class="line">build/</span><br><span class="line">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br></pre></td></tr></table></figure></li><li><p>执行<code>git config core.excludesfile .gitignore</code>指定忽略列表文件，可以看到 .git 中的 config 文件多了一项<code>excludesfile = .gitignore</code>    </p></li><li><p>补充：对于跟踪过的文件添加到忽略列表是不起作用的，如需生效，需要删除本地缓存，执行<code>git rm -r --cached .</code>、<code>git add --all</code>、<code>git commit -m&quot;修改说明&quot;</code></p></li><li></li></ul></li></ol><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>分支可以使得一些工作(如 bug 修复、开发新功能等)从主线分离出来，可以得到版本控制的同时也不影响主线或其他分支的开发，并在开发完成后进行合并，提高了协同开发的效率。</p><h4 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h4><ol><li><p>查看本地所有分支：<code>git branch</code></p></li><li><p>创建新分支：<code>git branch 新分支名</code></p></li><li><p>切换分支：<code>git checkout 分支名</code></p></li><li><p>创建并切换到新分支：<code>git checkout -b 新分支名</code></p></li><li><p>把“分支名称”所对应的分支提交合并到当前分支上：<code>git merge --no-ff 分支名称</code></p><ul><li><p><code>--no-ff</code>表示关闭 Fast-forward 模式，即每次合并都会新建一个提交，否则在 Fast-forward 模式下，条件允许时只会简单的移动 HEAD 指针，不创建提交，合并图和更新没区别，看不出合并的痕迹：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210061153444.png" alt="不同合并模式的日志" data-caption="不同合并模式的日志" loading="lazy"></p></li><li></li></ul></li><li><p>删除非当前分支：</p><ul><li><code>git branch -d 分支名</code>：删除分支，但会检查此分支的提交是否已经合并到主分支上   </li><li><code>git branch -D 分支名</code>：强制删除，不做任何检查</li></ul></li></ol><h2 id="概念分析"><a href="#概念分析" class="headerlink" title="概念分析"></a>概念分析</h2><ol><li><p>Git 本地创建的默认分支为 master，这个分支并不特殊，只是 Git 的默认设置，可在用户目录下的 .gitconfig 文件进行修改（GitHub 中默认分支是 main）：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210011144974.png" alt="Git 默认分支修改" data-caption="Git 默认分支修改" loading="lazy"></p></li><li><p>HEAD 特殊指针，它指向当前操作的分支，一般是在查看提交日志时看到：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210020919753.png" alt="HEAD 使用" data-caption="HEAD 使用" loading="lazy"></p></li><li><p>Git 创建新分支后，新分支会继承主分支的所有提交，切换分支后，我们所做的提交将属于此分支，HEAD 指向新分支的最新提交：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210020912339.png" alt="新分支创建" data-caption="新分支创建" loading="lazy"></p></li><li><p>当在新分支上的工作完成后，我们可以把其合并到主分支中，并且作为新的提交：</p><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210020953716.png" alt="Git 分支合并" data-caption="Git 分支合并" loading="lazy"></p></li><li><p>合并冲突的产生：当从创建分支开始，在两条分支上都对同一文件进行修正提交时，就有可能产生冲突，例如对同一部分或同一行记录进行修改提交，合并时会出现：</p><ul><li><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021027907.png" alt="Git 合并冲突" data-caption="Git 合并冲突" loading="lazy"></p></li><li><p>此时需要对冲突的文件进行修改，决定最终提交：</p></li><li><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021032430.png" alt="修改冲突文件" data-caption="修改冲突文件" loading="lazy"></p></li><li><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021041551.png" alt="最终修改" data-caption="最终修改" loading="lazy"></p></li><li><p>然后使用<code>git add --all</code>和<code>git commit -m&quot;&quot;</code>做一次新提交即可：</p></li><li><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021034211.png" alt="冲突解决日志" data-caption="冲突解决日志" loading="lazy"></p></li><li><p>补充：如果此时想要撤销合并，可以使用版本回滚<code>git reset --hard commitId</code></p></li><li></li></ul></li><li><p>避免冲突：在实际开发中，每个人负责开发的部分不同，冲突产生的原因一般是由于消息滞后，未及时同步开发进度，在修改前未及时的把对方的分支合并到自己的分支上，此时做出修改就易发生冲突。因此，避免冲突的关键是版本落后的一方应自觉的把对方的分支进行合并再工作，并且发生冲突要与对方进行协商再做修改，保证代码的安全稳定。</p></li></ol><h2 id="一般开发使用分支介绍"><a href="#一般开发使用分支介绍" class="headerlink" title="一般开发使用分支介绍"></a>一般开发使用分支介绍</h2><p><img data-fancybox="gallery" src="https://cdn.jsdelivr.net/gh/Lzque/blogImage@main/writing/202210021101048.png" alt="分支使用" data-caption="分支使用" loading="lazy"></p><ol><li><p>master或main(生产分支、主分支)：中小规模项目作为线上运行的分支；</p></li><li><p>develop(开发分支)：从master上创建的分支，一般作为开发部门主要开发的分支，但开发人员也是在此基础上创建分支(feature/xxxx分支)开发，然后合并到此分支上，阶段开发完成后，在将此分支合并到master分支上，准备上线</p></li><li><p>feature/xxx 分支：从develop创建的分支，在同期并行开发，完成相应功能后合并到develop分支上，并删除本分支</p></li><li><p>hotfix/xxx 分支：从master派生的分支，一般用于线上bug修复，修复完成后合并到master、test、develop分支上</p></li><li><p>当然还有 test(测试分支)、pre(预上线分支)等，并且以上只是实际开发中的一种情况而已，供参考</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近使用 Hexo+GitHub 搭建博客，所以对 Git 做下记录总结。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Git 是一个分布式的版本控制工具。两个关键词：&lt;</summary>
      
    
    
    
    <category term="Git" scheme="https://lzque.github.io/categories/Git/"/>
    
    
    <category term="学习笔记" scheme="https://lzque.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Git 基础" scheme="https://lzque.github.io/tags/Git-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
